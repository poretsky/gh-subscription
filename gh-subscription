#!/usr/bin/env bash
#
# Copyright (c) 2023 Igor B. Poretsky
#
# SPDX-License-Identifier: MIT

set -e

declare -a repo_list
declare -i list_size
declare blocked

function usage {
    cat <<EOF
Usage: gh subscription <subcommand> [<options>]

The subcommands are as follows:

list    -- List watched repositories.
add     -- Subscribe to a repository.
delete  -- Unsubscribe from a repository.
block   -- Block notifications from a repository.
unblock -- Unblock notifications from a repository.
status  -- Print a subscription status for a repository.

Type "gh subscription <subcommand> --help"
to get a subcommand help.
EOF
}

function retrieve {
    local -i pgn=0 count=0
    local -ir limit=100
    local endpoint="user/subscriptions"
    [ -n "$1" ] && endpoint="users/$1/repos"
    list_size=0
    until [[ $count != 0 ]]; do
        let pgn++ count=$limit
        while read item; do
            repo_list[$((list_size++))]=$item
            let count--
        done < <(gh api $endpoint --jq '.[].full_name' -X GET -F page=$pgn -F per_page=$limit)
    done
}

function list_usage {
    cat <<EOF
Usage: gh subscription list [{<owner> | --own | --foreign | --summary}] [--limit <n>]

List watched repositories. If an owner is specified explicitly,
only the repositories of that particular owner are listed.

The other options are as follows:

--summary   -- Print number of watched repositories for each owner.
--own       -- List only your own repositories.
--foreign   -- List only foreign repositories.
--limit <n> -- Show no more than n repositories (30 by default).
EOF
}

function list_error {
    echo "Command syntax error!"
    echo
    list_usage
    exit 1
}

function filter {
    if [ $# -gt 0 ]; then
        local -i count=0 limit=0
        local owner=$1 grep_switches
        [ $# -gt 1 ] && limit=$2
        [ $# -gt 2 ] && grep_switches=$3
        for ((i=0; $i < $list_size; i++))
        do echo ${repo_list[$i]} | grep $grep_switches "^$owner/" && [ $limit -gt 0 -a $((++count)) -ge $limit ] && break
        done
    else
        for ((i=0; $i < $list_size; i++)); do
            local repo=${repo_list[$i]}
            subscribed $repo && [ "$blocked" = "true" ] && echo $repo
        done
    fi
}

function list {
    local -i limit=0
    local mode owner grep_switches
    while [[ $# != 0 ]]; do
        case $1 in
            --limit)
                shift
                [ $# -eq 0 ] && list_error
                let limit=$1 || list_error
                ;;
            --own)
                [ -n "$mode" ] && list_error
                owner=`gh api user --jq '.login'`
                mode=owner
                ;;
            --foreign)
                [ -n "$mode" ] && list_error
                owner=`gh api user --jq '.login'`
                mode=owner
                grep_switches="-v"
                ;;
            --summary)
                [ -n "$mode" -o -n "$owner" ] && list_error
                mode=summary
                ;;
            --help)
                list_usage
                exit
                ;;
            *)
                [ -n "$mode" ] && list_error
                owner=$1
                mode=owner
                ;;
        esac
        shift
    done

    if [[ $limit > 0 || -n $mode ]]; then
        [ $limit -eq 0 ] && let limit=30
        retrieve
        case $mode in
            owner)
                filter $owner $limit $grep_switches
                ;;
            summary)
                local -A owners_stat
                for ((i=0; $i < $list_size; i++)); do
                    owner=$(dirname ${repo_list[$i]})
                    count=${owners_stat[$owner]}
                    if [ -n "$count" ]
                    then owners_stat[$owner]=$((count + 1))
                    else owners_stat[$owner]=1
                    fi
                done
                count=0
                for owner in ${!owners_stat[@]}; do
                    echo $owner ${owners_stat[$owner]}
                    [ $limit -gt 0 -a $((++count)) -ge $limit ] && break
                done
                ;;
            *)
                for ((i=0; $i < $list_size; i++)); do
                    [ $limit -gt 0 -a $i -ge $limit ] && break
                    echo ${repo_list[$i]}
                done
                ;;
        esac
    else
        gh api user/subscriptions --jq '.[].full_name'
    fi
}

function subscribed {
    blocked=`gh api repos/$1/subscription --jq '.ignored' 2>/dev/null`
}

function invalid_repo_spec {
    echo "Specify repository as <owner>/<repo>"
    exit 1
}

function subscribe {
    case $1 in
        --help)
            echo "Usage: gh subscription add <owner>/<repo>"
            ;;
        */*)
            if subscribed $1
            then echo "Already subscribed"
            else gh api repos/$1/subscription --silent -X PUT -F subscribed=true
            fi
            ;;
        *)
            invalid_repo_spec
            ;;
    esac
}

function manage_subscription {
    local cmd=$1 options
    case $1 in
        delete)
            options=DELETE
            report=Unsubscribed
            ;;
        block)
            options="PUT -F ignored=true"
            report="Blocked notifications"
            ;;
        unblock)
            options="PUT -F ignored=false"
            report="Unblocked notifications"
            ;;
        *)
            ;;
    esac
    shift
    case $1 in
        --help)
            echo "Usage: gh subscription $cmd {<owner>[/<repo>]}"
            ;;
        */*)
            if subscribed $1; then
                case "$options" in
                    *$blocked)
                    ;;
                    *)
                        gh api repos/$1/subscription --silent -X $options
                        ;;
                esac
            else
                echo "Not subscribed to $1"
            fi
            ;;
        *)
            local -i count=0
            local repo list
            if [ "$cmd" = "unblock" ]; then
                list="filter"
                retrieve $1
            else
                list="filter $1"
                retrieve
            fi
            while read repo; do
                gh api repos/$repo/subscription --silent -X $options
                let ++count
            done < <($list)
            repo=repositories
            [ $count -eq 1 ] && repo=repository
            echo "$report from $count $repo owned by $1"
            ;;
    esac
}

function subscription_status {
    case $1 in
        --help)
            echo "Usage: gh subscription status <owner>/<repo>"
            ;;
        */*)
            if subscribed $1; then
                case $blocked in
                    false)
                        echo "Subscribed"
                        ;;
                    *)
                        echo "Blocked"
                        ;;
                esac
            else
                echo "Not subscribed"
            fi
            ;;
        *)
            invalid_repo_spec
            ;;
    esac
}

case $1 in
    --help)
        usage
        ;;
    list)
        shift
        list "$@"
        ;;
    status)
        shift
        subscription_status "$@"
        ;;
    add)
        shift
        subscribe "$@"
        ;;
    delete|block|unblock)
        manage_subscription "$@"
        ;;
    *)
        echo "Unknown command \"$1\""
        echo
        usage
        exit 1
        ;;
esac
